package jdbcFirst;

import java.security.Timestamp;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.postgresql.Driver;

import jdbcFirst.util.ConnectionManager;

public class JdbcRunner {
	public static void main(String[] args) throws SQLException{
		Class<Driver> driverClass = Driver.class;
/*
 *  005 Statement. DDL операции
*/
		String sql1 = """
				CREATE TABLE IF NOT EXISTS info (
					id SERIAL PRIMARY KEY ,
					data TEXT NOT NULL
				);
				 """;
		String sql2 = """
				DROP DATABASE inn;
				 """;
		String sql3 = """
				DROP TABLE info;
				 """;
/*
 *  006 Statement. DML операции
*/
		String sql4 = """
				SELECT * FROM ticket
				WHERE id=5;
				 """;
		String sql5 = """
				INSERT INTO info (data)
				VALUES 
				('autogenerated')
				 """;
		try (Connection connection = ConnectionManager.get();
				Statement statement = connection.createStatement()
			) {
			System.out.println("--------004 Properties файл----------");
			System.out.println(connection.getTransactionIsolation());
			statement.execute(sql1);
//			System.out.println("---------005 Statement. DDL операции--------");
//			boolean executeResult = statement.execute(sql3);
//			System.out.println(executeResult);
			System.out.println("---------007 ResultSet. Операция SELECT--------");
			ResultSet executeResultQuery = statement.executeQuery(sql4);  
			while(executeResultQuery.next()) {
				System.out.println(executeResultQuery.getLong("id"));
				System.out.println(executeResultQuery.getString("passenger_no"));
				System.out.println(executeResultQuery.getBigDecimal("cost"));
				System.out.println("----------");
			}
			System.out.println("---------008 ResultSet. Generated keys--------");
			int executeResultUpdate = statement.executeUpdate(sql5, Statement.RETURN_GENERATED_KEYS);
			ResultSet generatedKeys = statement.getGeneratedKeys();
			if (generatedKeys.next()) {
				int generatedId = generatedKeys.getInt("id");
				System.out.println(generatedId);
			}
			System.out.println("--------009 SQL Injection--------");
			System.out.println(getTicketId("3"));
			System.out.println("--------010 PreparedStatement. 1 example--------");
			System.out.println(getTicketIdPreparedStatement1(2L));
			System.out.println("--------010 PreparedStatement. 2 example--------");
			System.out.println(getTicketIdPreparedStatement2(LocalDate.of(2020, 10, 1).atStartOfDay(), LocalDateTime.now()));
			System.out.println("--------002 MetaData (JDBC Advanced)--------");
			try {
				checkMetaData();
			} finally {
				ConnectionManager.closePool();	// Пул соединений закроется в конце и освоодит все наши соединения
			}
		}		
	}
	
	// 009 SQL Injection
	private static List<Long> getTicketId(String query) throws SQLException {
		String sql = """
				SELECT id
				FROM ticket
				WHERE flight_id=%s
				""".formatted(query);
		List<Long> result = new ArrayList<>();
		try (Connection connection = ConnectionManager.get();
				Statement statement = connection.createStatement()) {
			ResultSet resultSet = statement.executeQuery(sql);
			while(resultSet.next()) {
				result.add(resultSet.getLong("id"));
			}
		}
		return result;
	}
	
	// 010 PreparedStatement
		// Поиск id через один параметр Long
	private static List<Long> getTicketIdPreparedStatement1(Long queryL) throws SQLException {
		String sql = """
				SELECT id
				FROM ticket
				WHERE flight_id = ?;
				""";
		List<Long> resultList = new ArrayList<>();
		try(Connection connectionPrepared = ConnectionManager.get();
		PreparedStatement preparedStatement = connectionPrepared.prepareStatement(sql)) {
		preparedStatement.setLong(1, queryL);
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			resultList.add(resultSet.getLong("id"));
		}
		return resultList;
		}
	}
	
	// Поиск id через два параметра: Timestemp(start, end)
	private static List<Long>  getTicketIdPreparedStatement2(LocalDateTime queryStart, LocalDateTime queryEnd) throws SQLException {
		String sql = """
				SELECT id 
				FROM flight
				WHERE departure_date BETWEEN ? AND ?;
				""";
		List<Long> resultList = new ArrayList<>();
		try (Connection connection = ConnectionManager.get();
			 PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
			// 001 FetchSize (JDBC Аdvanced)
			preparedStatement.setFetchSize(50);				// Количество строк, которое обработается на стороне java приложения
			preparedStatement.setQueryTimeout(10);			// Время ограничения обработки запроса
			preparedStatement.setMaxRows(100);				// Общее количество строк в одном запросе
			preparedStatement.setTimestamp(1, java.sql.Timestamp.valueOf(queryStart));
			preparedStatement.setTimestamp(2, java.sql.Timestamp.valueOf(queryEnd));
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				resultList.add(resultSet.getLong("id"));
			}
		}
		return resultList;
	}
	
	/*
	 * JDBC Аdvanced
	 * 002 MetaData
	 */
	private static void checkMetaData() throws SQLException {
		try (Connection connection = ConnectionManager.get()) {
			DatabaseMetaData metaData = connection.getMetaData();
			ResultSet catalog = metaData.getCatalogs();
			
			while(catalog.next()) {
				String catalogString = catalog.getString(1);
				System.out.println(catalogString);
				ResultSet schemas = metaData.getSchemas();
				while(schemas.next()) {
					String schemaString = schemas.getString("TABLE_SCHEM");
					System.out.println(schemaString);
					ResultSet tables = metaData.getTables(catalogString, schemaString, "%", new String[] {"TABLE"});
					while(tables.next()) {
						String tableString = tables.getString("TABLE_NAME");
						System.out.println(tableString);
					}
				}
			}
		} 
	}
}